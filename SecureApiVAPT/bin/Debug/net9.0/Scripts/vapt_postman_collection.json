{
  "info": {
    "name": "Secure API VAPT Testing",
    "description": "Comprehensive VAPT (Vulnerability Assessment and Penetration Testing) collection for the Secure API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://localhost:5001",
      "type": "string"
    },
    {
      "key": "userToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication Tests",
      "item": [
        {
          "name": "1. Valid User Registration",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"vapt_test_user\",\n  \"email\": \"vapt@test.com\",\n  \"password\": \"SecurePass123!\",\n  \"age\": 25\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set(\"userToken\", jsonData.token);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.exist;",
                  "    pm.expect(jsonData.user.username).to.eql(\"vapt_test_user\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Invalid Registration - Weak Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"weak_user\",\n  \"email\": \"weak@test.com\",\n  \"password\": \"123\",\n  \"age\": 25\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400 for weak password\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Valid Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"vapt_test_user\",\n  \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set(\"userToken\", jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "4. Invalid Login - Wrong Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"vapt_test_user\",\n  \"password\": \"WrongPassword123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 for invalid credentials\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Authorization Tests",
      "item": [
        {
          "name": "1. Access Protected Endpoint with Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "profile"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 for authenticated request\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Access Protected Endpoint without Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "profile"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401 for unauthenticated request\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "3. Access Admin Endpoint with User Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{userToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 403 for unauthorized admin access\", function () {",
                  "    pm.response.to.have.status(403);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "SQL Injection Tests",
      "item": [
        {
          "name": "1. SQL Injection in Query Parameter",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/search?username='; DROP TABLE Users; --",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "search"],
              "query": [
                {
                  "key": "username",
                  "value": "'; DROP TABLE Users; --"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"SQL injection blocked with 400 status\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. SQL Injection in Request Body",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"'; DROP TABLE Users; --\",\n  \"email\": \"test@test.com\",\n  \"password\": \"SecurePass123!\",\n  \"age\": 25\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"SQL injection in body blocked with 400 status\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "XSS Tests",
      "item": [
        {
          "name": "1. XSS in Query Parameter",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/search?username=<script>alert('XSS')</script>",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "search"],
              "query": [
                {
                  "key": "username",
                  "value": "<script>alert('XSS')</script>"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"XSS blocked with 400 status\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. XSS in Request Body",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"<script>alert('XSS')</script>\",\n  \"email\": \"test@test.com\",\n  \"password\": \"SecurePass123!\",\n  \"age\": 25\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"XSS in body blocked with 400 status\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Rate Limiting Tests",
      "item": [
        {
          "name": "1. Rate Limit Test (35 requests)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test should be run multiple times to trigger rate limiting",
                  "pm.test(\"Request processed\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    console.log(\"Rate limiting triggered\");",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Security Headers Tests",
      "item": [
        {
          "name": "1. Check Security Headers",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"X-Frame-Options header present\", function () {",
                  "    pm.response.to.have.header(\"X-Frame-Options\");",
                  "    pm.expect(pm.response.headers.get(\"X-Frame-Options\")).to.eql(\"DENY\");",
                  "});",
                  "",
                  "pm.test(\"X-XSS-Protection header present\", function () {",
                  "    pm.response.to.have.header(\"X-XSS-Protection\");",
                  "    pm.expect(pm.response.headers.get(\"X-XSS-Protection\")).to.eql(\"1; mode=block\");",
                  "});",
                  "",
                  "pm.test(\"X-Content-Type-Options header present\", function () {",
                  "    pm.response.to.have.header(\"X-Content-Type-Options\");",
                  "    pm.expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.eql(\"nosniff\");",
                  "});",
                  "",
                  "pm.test(\"Strict-Transport-Security header present\", function () {",
                  "    pm.response.to.have.header(\"Strict-Transport-Security\");",
                  "});",
                  "",
                  "pm.test(\"Referrer-Policy header present\", function () {",
                  "    pm.response.to.have.header(\"Referrer-Policy\");",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "CORS Tests",
      "item": [
        {
          "name": "1. CORS with Authorized Origin",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Origin",
                "value": "https://yourdomain.com"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"CORS allows authorized origin\", function () {",
                  "    var corsHeader = pm.response.headers.get(\"Access-Control-Allow-Origin\");",
                  "    pm.expect(corsHeader).to.eql(\"https://yourdomain.com\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. CORS with Unauthorized Origin",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Origin",
                "value": "https://malicious-site.com"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/v1/products",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "products"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"CORS blocks unauthorized origin\", function () {",
                  "    var corsHeader = pm.response.headers.get(\"Access-Control-Allow-Origin\");",
                  "    pm.expect(corsHeader).to.not.exist;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "1. Non-existent Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v1/nonexistent",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "nonexistent"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"404 error properly handled\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "2. Malformed JSON",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{ invalid json }"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Malformed JSON properly rejected\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
} 